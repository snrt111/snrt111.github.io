<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android集成Aspectj</title>
    <url>/docs/2023/08/02/Android%E9%9B%86%E6%88%90Aspectj/</url>
    <content><![CDATA[<p>使用 AspectJ 在 Android 项目中实现面向切面编程（AOP）可以帮助您在代码中更好地处理横切关注点，如日志记录、权限控制、性能监测等。下面是在 Android 项目中使用 AspectJ 的详细流程：</p>
<h2 id="1-添加依赖和插件："><a href="#1-添加依赖和插件：" class="headerlink" title="1. 添加依赖和插件："></a>1. 添加依赖和插件：</h2><p>在您的 Android 项目中，首先需要添加 AspectJ 相关的依赖和插件。</p>
<ul>
<li>在项目级别的 <code>build.gradle</code> 文件中，添加 AspectJ 的 Gradle 插件依赖：</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">&#x27;org.aspectj:aspectjtools:1.9.8&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意:<code>dependencies</code> 所在的<code>buildscript</code>节点一定要在<code>plugins</code>的前面</p>
<ul>
<li>在应用模块的 <code>build.gradle</code> 文件中添加以下内容：</li>
</ul>
<p>在<code>dependencies</code>中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    api &#x27;org.aspectj:aspectjrt:1.9.8&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>build.gradle</code>文件下面添加aspectj的编译配置：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.bridge.IMessage</span><br><span class="line"><span class="keyword">import</span> org.aspectj.bridge.MessageHandler</span><br><span class="line"><span class="keyword">import</span> org.aspectj.tools.ajc.Main</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">def</span> log = <span class="keyword">project</span>.logger</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">def</span> variants = <span class="keyword">project</span>.android.applicationVariants</span><br><span class="line"></span><br><span class="line">variants.all &#123; variant -&gt;</span><br><span class="line">    JavaCompile javaCompile = variant.javaCompileProvider.get()</span><br><span class="line">    javaCompile.<span class="keyword">doLast</span> &#123;</span><br><span class="line">        String[] args = [<span class="string">&quot;-showWeaveInfo&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;-17&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;-inpath&quot;</span>, javaCompile.<span class="keyword">destinationDir</span>.toString(),</span><br><span class="line">                         <span class="string">&quot;-aspectpath&quot;</span>, javaCompile.<span class="keyword">classpath</span>.asPath,</span><br><span class="line">                         <span class="string">&quot;-d&quot;</span>, javaCompile.<span class="keyword">destinationDir</span>.toString(),</span><br><span class="line">                         <span class="string">&quot;-classpath&quot;</span>, javaCompile.<span class="keyword">classpath</span>.asPath,</span><br><span class="line">                         <span class="string">&quot;-bootclasspath&quot;</span>, <span class="keyword">project</span>.android.bootClasspath.<span class="keyword">join</span>(<span class="keyword">File</span>.pathSeparator)]</span><br><span class="line"></span><br><span class="line">        MessageHandler handler = <span class="keyword">new</span> MessageHandler(<span class="keyword">true</span>)</span><br><span class="line">        <span class="keyword">new</span> Main().run(args, handler)</span><br><span class="line">        <span class="keyword">for</span> (IMessage message : handler.getMessages(<span class="keyword">null</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (message.getKind()) &#123;</span><br><span class="line">                <span class="keyword">case</span> IMessage.ABORT:</span><br><span class="line">                <span class="keyword">case</span> IMessage.ERROR:</span><br><span class="line">                <span class="keyword">case</span> IMessage.FAIL:</span><br><span class="line">                    log.error message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.WARNING:</span><br><span class="line">                    log.warn message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.INFO:</span><br><span class="line">                    log.info message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.DEBUG:</span><br><span class="line">                    log.debug message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-编写-AspectJ-切面："><a href="#2-编写-AspectJ-切面：" class="headerlink" title="2. 编写 AspectJ 切面："></a>2. 编写 AspectJ 切面：</h2><p>创建一个 Java 类作为您的 AspectJ 切面，用于定义横切逻辑。切面类中定义了一系列切点和通知，以及需要在哪些地方织入这些通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;LoggingAspect&quot;</span>;</span><br><span class="line">    ThreadLocal&lt;Long&gt; time = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.snrt.helloworld.music.*.getMusics(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在方法调用前执行的逻辑，比如打印日志</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;方法开始时间: &quot;</span>+ startTime);</span><br><span class="line">        time.set(startTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.snrt.helloworld.music.*.getMusics(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在方法调用前执行的逻辑，比如打印日志</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;方法结束时间: &quot;</span>+ endTime);</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;after: &quot;</span>+ (endTime - time.get()) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-构建和运行："><a href="#3-构建和运行：" class="headerlink" title="3. 构建和运行："></a>3. 构建和运行：</h2><p>完成上述步骤后，重新构建您的 Android 项目。AspectJ 将会在编译期间织入您的切面逻辑。<br>运行结束如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-08-04 20:40:47.160 22060-22060 LoggingAspect           com.snrt.helloworld                  E  after: 12ms</span><br><span class="line">2023-08-04 20:44:47.954 24627-24627 LoggingAspect           com.snrt.helloworld                  E  方法开始时间: 1691153087954</span><br><span class="line">2023-08-04 20:44:47.968 24627-24627 LoggingAspect           com.snrt.helloworld                  E  方法结束时间: 1691153087968</span><br><span class="line">2023-08-04 20:44:47.968 24627-24627 LoggingAspect           com.snrt.helloworld                  E  after: 14ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上就是在 Android 项目中使用 AspectJ 的基本流程。使用 AspectJ 可以更好地将横切关注点从业务逻辑中分离出来，从而提高代码的模块化和可维护性。</p>
]]></content>
  </entry>
  <entry>
    <title>MySql优化</title>
    <url>/docs/2023/11/11/MySql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="以下是一些常用的方法和技巧："><a href="#以下是一些常用的方法和技巧：" class="headerlink" title="以下是一些常用的方法和技巧："></a>以下是一些常用的方法和技巧：</h2><h3 id="优化SQL查询语句："><a href="#优化SQL查询语句：" class="headerlink" title="优化SQL查询语句："></a>优化SQL查询语句：</h3><ol>
<li>确保查询语句使用合适的索引，可以通过创建适当的索引来优化查询性能。</li>
<li>避免使用SELECT *，而是只选择需要的列，减少数据传输量。</li>
<li>使用JOIN查询时，确保相关字段有适当的索引。</li>
<li>避免在WHERE子句中使用函数，这会导致无法使用索引。</li>
</ol>
<h3 id="优化数据库结构："><a href="#优化数据库结构：" class="headerlink" title="优化数据库结构："></a>优化数据库结构：</h3><ol>
<li>选择合适的数据类型，尽量避免使用过大或过小的数据类型，以节省存储空间和提高查询效率。</li>
<li>正规化数据库，避免冗余数据。合理设计表结构，减少不必要的关联查询。</li>
<li>使用合适的主键和唯一索引，以提高查询和更新的性能。</li>
</ol>
<h3 id="配置MySQL服务器："><a href="#配置MySQL服务器：" class="headerlink" title="配置MySQL服务器："></a>配置MySQL服务器：</h3><ol>
<li>调整缓冲区大小，如innodb_buffer_pool_size和key_buffer_size，以提高读写性能。</li>
<li>调整并发连接数，根据实际情况合理设置max_connections参数。</li>
<li>合理分配系统资源，确保MySQL服务器有足够的内存和CPU资源。</li>
</ol>
<h3 id="缓存优化："><a href="#缓存优化：" class="headerlink" title="缓存优化："></a>缓存优化：</h3><ol>
<li>使用MySQL的查询缓存功能，对于经常重复的查询可以从缓存中获取结果，减少数据库的查询压力。</li>
<li>合理利用应用程序层面的缓存，如使用Memcached或Redis来缓存查询结果或热门数据，减少对数据库的访问。</li>
</ol>
<h3 id="优化磁盘性能："><a href="#优化磁盘性能：" class="headerlink" title="优化磁盘性能："></a>优化磁盘性能：</h3><ol>
<li>{将MySQL的数据文件和日志文件分别放置在不同的物理磁盘上，以提高读写性能。</li>
<li>使用RAID技术，如RAID 10，以提高磁盘的读写速度和容错能力。}</li>
</ol>
<h3 id="监控和调优："><a href="#监控和调优：" class="headerlink" title="监控和调优："></a>监控和调优：</h3><ol>
<li>定期监控MySQL服务器的性能指标，如CPU、内存、磁盘和网络的使用情况。</li>
<li>使用MySQL自带的性能监控工具，如Explain和Slow Query Log，来分析慢查询并进行优化。</li>
<li>使用第三方监控工具，如Percona Toolkit和pt-query-digest，进行更深入的性能分析和调优。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Springboot集成RabbitMQ</title>
    <url>/docs/2023/07/30/Springboot%E9%9B%86%E6%88%90RabbitMQ/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Centos安装Docker</title>
    <url>/docs/2024/06/15/Centos%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="查看当前docker状态"><a href="#查看当前docker状态" class="headerlink" title="查看当前docker状态"></a>查看当前docker状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure>

<h3 id="验证Docker"><a href="#验证Docker" class="headerlink" title="验证Docker"></a>验证Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce</span><br></pre></td></tr></table></figure>


<h3 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxxxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Taro 介绍</title>
    <url>/docs/2024/06/15/Taro%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Taro-介绍"><a href="#Taro-介绍" class="headerlink" title="Taro 介绍"></a>Taro 介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Taro</strong> 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 <a href="https://mp.weixin.qq.com/">微信</a> / <a href="https://mp.jd.com/?entrance=taro">京东</a> / <a href="https://smartprogram.baidu.com/">百度</a> / <a href="https://mini.open.alipay.com/">支付宝</a> / <a href="https://developer.open-douyin.com/">字节跳动</a> / <a href="https://q.qq.com/">QQ</a> / <a href="https://open.feishu.cn/document/uYjL24iN/ucDOzYjL3gzM24yN4MjN">飞书</a> 小程序 / H5 / RN 等应用。</p>
<p>现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道。当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="多端转换支持"><a href="#多端转换支持" class="headerlink" title="多端转换支持"></a>多端转换支持</h3><p>Taro 3 可以支持转换到 H5、ReactNative 以及任意小程序平台。</p>
<p>目前官方支持转换的平台如下：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/h5-81f73c447874b6528e84ee395bece16e.png" alt="H5" style="zoom:2%;" /> H5</a></li>
<li><a href="https://reactnative.dev/?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/rn-ecec68ba194e4b5e9fc3e853cc00c569.png" alt="React Native" style="zoom:2%;" /> React Native</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/weapp-0e8fbe2d5eb3676de4961b54ee7f5ba4.png" alt="微信小程序" style="zoom:2%;" /> 微信小程序</a></li>
<li><a href="https://mp.jd.com/?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/jd-03cf3bd618bc6274dd94e14928e325c3.png" alt="京东小程序" style="zoom:2%;" /> 京东小程序</a></li>
<li><a href="https://smartprogram.baidu.com/developer/index.html?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/swan-566f56d360909d0457073b67b8f48958.png" alt="百度小程序" style="zoom:2%;" /> 百度智能小程序</a></li>
<li><a href="https://opendocs.alipay.com/mini/developer/getting-started?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/alipay-ee5545de747ce1ad6e17faec10358975.png" alt="支付宝小程序" style="zoom:2%;" /> 支付宝小程序</a></li>
<li><a href="https://developer.open-douyin.com/docs/resource/zh-CN/mini-app/introduction/overview?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/tt-f4ec120e570f924e7ef763dcaf7fc69d.png" alt="抖音小程序" style="zoom:2%;" /> 抖音小程序</a></li>
<li><a href="https://q.qq.com/wiki/develop/miniprogram/frame/?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/qq-3f77e6fbb490848ab8aa8183e9399110.png" alt="QQ 小程序" style="zoom:2%;" /> QQ 小程序</a></li>
<li><a href="https://open.dingtalk.com/document/org/develop-org-mini-programs?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/ding-talk-b5a9f3f70aae5365787ac12a294e1535.png" alt="钉钉小程序" style="zoom:8%;" /> 钉钉小程序</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/qywx-dev.html?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/wework-d23d31eee89d30c4909b90d328ea57eb.png" alt="企业微信小程序" style="zoom:5%;" /> 企业微信小程序</a></li>
<li><a href="https://opendocs.alipay.com/iot/multi-platform/vcs0fv?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/alipay-ee5545de747ce1ad6e17faec10358975.png" alt="支付宝 IOT 小程序" style="zoom:2%;" /> 支付宝 IOT 小程序</a></li>
<li><a href="https://open.feishu.cn/document/uYjL24iN/uMjNzUjLzYzM14yM2MTN?from=taro"><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/lark-b264e88fd335c5d932313f1f7e612b03.png" alt="飞书小程序" style="zoom:2%;" /> 飞书小程序</a></li>
</ul>
<h3 id="框架支持"><a href="#框架支持" class="headerlink" title="框架支持"></a>框架支持</h3><p>在 Taro 3 中可以使用完整的 <a href="https://react.dev/"><strong><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/react-81ed438b18e24116794df3148c0e1eaa.png" alt="react" style="zoom:1%;" /> React</strong></a> / <a href="https://vuejs.org/"><strong><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/vue-be5842d62a326b39e66e79386b9df33b.png" alt="vue" style="zoom:1%;" /> Vue</strong></a> / <a href="https://preactjs.com/"><strong><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/preact-68c69a4cef45e1be5985460257983da3.png" alt="preact" style="zoom:1%;" /> Preact</strong></a> / <a href="https://svelte.dev/"><strong><img src="https://storage.360buyimg.com/pubfree-bucket/taro-docs/f1fdc1a4a18/assets/images/svelte-a7bfb5d80483441bcd32443d1adb0ae6.png" alt="svelte" style="zoom:4%;" /> Svelte</strong></a> / <a href="https://github.com/NervJS/nerv"> Nerv</a> 开发体验，具体请参考：</p>
<ul>
<li><a href="https://taro-docs.jd.com/docs/react-overall">基础教程——React</a></li>
<li><a href="https://taro-docs.jd.com/docs/vue-overall">基础教程——Vue</a></li>
<li><a href="https://taro-docs.jd.com/docs/vue3">基础教程——Vue3</a></li>
<li><a href="https://taro-docs.jd.com/docs/preact">基础教程——Preact</a></li>
</ul>
<ul>
<li>Vue</li>
</ul>
<p>示例代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;Hello World！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onShow</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onHide</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="Taro-UI"><a href="#Taro-UI" class="headerlink" title="Taro UI"></a>Taro UI</h2><p><a href="https://taro-docs.jd.com/docs/#taro-ui">https://taro-docs.jd.com/docs/#taro-ui</a></p>
<blockquote>
<p>Taro 3 只能配合使用 taro-ui@next 版本</p>
<p>安装命令： <code>npm i taro-ui@next</code></p>
</blockquote>
<p>一款基于 <code>Taro</code> 框架开发的多端 UI 组件库。</p>
<p><a href="https://taro-ui.jd.com/">Taro UI</a> 特性：</p>
<ul>
<li>基于 <code>Taro</code> 开发 UI 组件</li>
<li>一套组件可以在多端适配运行（<code>ReactNative</code> 端暂不支持）</li>
<li>提供友好的 API，可灵活的使用组件</li>
</ul>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p><a href="https://taro-docs.jd.com/docs/#%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90">https://taro-docs.jd.com/docs/#学习资源</a></p>
<p><a href="https://taro-docs.jd.com/blog">【资讯】Taro 团队博客</a></p>
<p><a href="https://taro-docs.jd.com/docs/guide">【教程】5 分钟上手 Taro 开发</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NDkzMTI3MA==&mid=2247484205&idx=1&sn=935bb7a35c11c33563eeb7c3aaca3321&chksm=fd2bab04ca5c2212b4cd8aeb5858bd08517aeb31e20727b22d1eee00b394184e7e61359e7dd9&token=1180618535&lang=zh_CN#rd">【视频】5 分钟快速上手 Taro 开发小程序</a></p>
]]></content>
      <categories>
        <category>Taro</category>
      </categories>
  </entry>
  <entry>
    <title>hexo搭建个人博客</title>
    <url>/docs/2023/11/11/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h3><p>到<a href="https://git-scm.com/">Git 官网</a>上下载安装。</p>
<p>安装好后，使用命令查看一下git版本，检查是否安装成功。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>windows安装完git后，可以使用git bash敲命令。</p>
<h3 id="1-2-安装node-js"><a href="#1-2-安装node-js" class="headerlink" title="1.2 安装node.js"></a>1.2 安装node.js</h3><p>直接到<a href="https://nodejs.org/en/">官网</a>上下载。</p>
<p>同样，安装完成后，使用命令查看版本，检查是否安装成功。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<h2 id="2-hexo安装与使用"><a href="#2-hexo安装与使用" class="headerlink" title="2. hexo安装与使用"></a>2. hexo安装与使用</h2><h3 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h3><p>创建一个文件夹blog，进入该文件夹，右键git bash here打开git bash，输入命令安装hexo：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-初始化hexo"><a href="#2-2-初始化hexo" class="headerlink" title="2.2 初始化hexo"></a>2.2 初始化hexo</h3><p>使用以下命令初始化hexo，其中myblog是自己随意取得名字</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装npm"><a href="#2-3-安装npm" class="headerlink" title="2.3 安装npm"></a>2.3 <a href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85npm&spm=1001.2101.3001.7020">安装npm</a></h3><p>进入myblog文件夹，安装npm：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹目录下有：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li>_config.yml: 博客的配置文件</li>
</ul>
<h3 id="2-4-启动本地服务站点："><a href="#2-4-启动本地服务站点：" class="headerlink" title="2.4 启动本地服务站点："></a>2.4 启动本地服务站点：</h3><p>使用如下命令启动本地服务站点，每次提交新的部署之前也可以先启动本地服务站点检查。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g //生成静态网页</span><br><span class="line">hexo s //打开本地服务站点</span><br></pre></td></tr></table></figure>

<p>在浏览器输入localhost:4000就可以看到生成的博客了，里面默认会有hello world这篇文章。</p>
<p>使用ctrl+c可以关掉本地服务。</p>
<p>hexo是一款静态框架，即我们在本地编写完文章后使用<code>hexo g</code>生成静态网页，然后将之部署到服务器上。</p>
<p>下面部署到github page上，以便大家可以访问。</p>
<h2 id="3-Github建站访问"><a href="#3-Github建站访问" class="headerlink" title="3. Github建站访问"></a>3. Github建站访问</h2><h3 id="3-1-Github新建仓库"><a href="#3-1-Github新建仓库" class="headerlink" title="3.1 Github新建仓库"></a>3.1 Github新建仓库</h3><p>如果没有Github账号，注册一个，登录。</p>
<p>创建一个和你用户名相同的仓库，后面加.github.io。</p>
<p><img src="https://img-blog.csdnimg.cn/05426969336b490bb44ee9e0c4cca386.png#pic_center" alt="在这里插入图片描述"></p>
<p>注意：格式必须是xxx.github.io，其中xxx是你注册Github的用户名，只有这样部署到GitHub page的时候，才会被识别。</p>
<h3 id="3-2-生成SSH添加到GitHub"><a href="#3-2-生成SSH添加到GitHub" class="headerlink" title="3.2 生成SSH添加到GitHub"></a>3.2 生成SSH添加到GitHub</h3><p>回到git bash，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name yourname</span><br><span class="line">git config <span class="literal">--global</span> user.email youremail</span><br></pre></td></tr></table></figure>

<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条命令，检查一下你有没有输对：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后创建SSH，一路回车</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p><img src="https://img-blog.csdnimg.cn/d11895a259284724ae495a4da65abcc2.png#pic_center" alt="在这里插入图片描述"></p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>
<p><img src="https://img-blog.csdnimg.cn/43352f70390245e08fd6684a3215c20d.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/e8bfefd2764d4b1b8cbdfca04ef06907.png#pic_center" alt="在这里插入图片描述"></p>
<p>Title随便写个名字，把<code>id_rsa.pub</code>里面的信息复制到key那里，点击<code>Add SSH key</code>。</p>
<p>在git bash中，使用以下命令查看是否成功：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/e49a6788fe0a4af898cb4cefa203ff06.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-3-将hexo部署到GitHub"><a href="#3-3-将hexo部署到GitHub" class="headerlink" title="3.3 将hexo部署到GitHub"></a>3.3 将hexo部署到GitHub</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件<code>_config.yml</code>，翻到最后，修改为如下所示，其中YourgithubName就是你的GitHub账户。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写。<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写。</p>
<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p>
<p><img src="https://img-blog.csdnimg.cn/8686b66d17204e858ad8b7fe4806cfa0.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-4-发布文章"><a href="#3-4-发布文章" class="headerlink" title="3.4 发布文章"></a>3.4 发布文章</h3><p>正式开始写文章了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure>

<p>然后在source/_post中打开对应的<a href="https://so.csdn.net/so/search?q=markdown&spm=1001.2101.3001.7020">markdown</a>文件，就可以开始编辑了。当你写完的时候，再</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这样就可以在自己的博客网站上看到刚发布的文章了。</p>
<h2 id="4-多终端工作"><a href="#4-多终端工作" class="headerlink" title="4. 多终端工作"></a>4. 多终端工作</h2><h3 id="4-1-原因"><a href="#4-1-原因" class="headerlink" title="4.1 原因"></a>4.1 原因</h3><p>由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件，上传的就是本地目录里面自动生成的.deploy_git里面的文件。</p>
<p>而我们的源文件、主题文件、配置文件都没有上传，这也就意味着我们只能在一台电脑上操作，换了电脑就没法改变我们的网站了。</p>
<p>我们可以利用git的分支系统将源文件上传到仓库的另一个分支。</p>
<h3 id="4-2-上传分支"><a href="#4-2-上传分支" class="headerlink" title="4.2 上传分支"></a>4.2 上传分支</h3><p>首先在Github上新建一个分支hexo。</p>
<p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p>
<p>然后在本地的任意目录下，打开git bash，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:TyroGzl/TyroGzl.github.io.git</span><br></pre></td></tr></table></figure>

<p>将hexo分支克隆到本地。</p>
<p>接下来在克隆到本地的TyroGzl.github.io中，把除了.git 文件夹外的所有文件都删掉</p>
<p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。</p>
<p>复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下内容，表示这些类型文件不需要git：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>

<p>而后</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m <span class="string">&quot;add branch&quot;</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure>

<p>这样就上传完了，可以去Github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p>
<p><img src="https://img-blog.csdnimg.cn/3d1d29147ef84bb99f3e6320fd2995d9.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="4-3-更换电脑操作"><a href="#4-3-更换电脑操作" class="headerlink" title="4.3 更换电脑操作"></a>4.3 更换电脑操作</h3><h4 id="4-3-1-安装git"><a href="#4-3-1-安装git" class="headerlink" title="4.3.1 安装git"></a>4.3.1 安装git</h4><h4 id="4-3-2-设置git全局邮箱和用户名"><a href="#4-3-2-设置git全局邮箱和用户名" class="headerlink" title="4.3.2 设置git全局邮箱和用户名"></a>4.3.2 设置git全局邮箱和用户名</h4><h4 id="4-3-3-设置ssh-key"><a href="#4-3-3-设置ssh-key" class="headerlink" title="4.3.3 设置ssh key"></a>4.3.3 设置ssh key</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> youremail</span><br><span class="line"><span class="comment">#生成后填到github</span></span><br><span class="line"><span class="comment">#验证是否成功</span></span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>

<h4 id="4-3-4-安装node-js"><a href="#4-3-4-安装node-js" class="headerlink" title="4.3.4 安装node.js"></a>4.3.4 安装node.js</h4><h4 id="4-3-5-安装hexo"><a href="#4-3-5-安装hexo" class="headerlink" title="4.3.5 安装hexo"></a>4.3.5 安装hexo</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-6-克隆项目"><a href="#4-3-6-克隆项目" class="headerlink" title="4.3.6 克隆项目"></a>4.3.6 克隆项目</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone git<span class="selector-tag">@</span>………………</span><br></pre></td></tr></table></figure>

<h4 id="4-3-7-安装npm"><a href="#4-3-7-安装npm" class="headerlink" title="4.3.7 安装npm"></a>4.3.7 安装npm</h4><p>进入到克隆的文件夹：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>生成，部署：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>以上内容摘自：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程_zjufangzh的博客-CSDN博客_hexo</a></p>
<h2 id="5-使用Vercel代理Github-Page"><a href="#5-使用Vercel代理Github-Page" class="headerlink" title="5. 使用Vercel代理Github Page"></a>5. 使用Vercel代理Github Page</h2><p>由于Github拒绝百度爬虫的访问，导致基于Github Page的个人博客无法被百度收录，这里介绍一个免费的方法，利用zeit（现在改名为vercel）代理。</p>
<h3 id="5-1-Github账户登录vercel"><a href="#5-1-Github账户登录vercel" class="headerlink" title="5.1 Github账户登录vercel"></a>5.1 Github账户登录vercel</h3><p>打开<a href="https://vercel.com/login">vercel网站</a>。选择 <code>Continue with Github</code>，利用自己的Github账号登录。<br><img src="https://img-blog.csdnimg.cn/aabcf4e7bad545628202f4d1dec23a19.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="5-2-新建vercel项目"><a href="#5-2-新建vercel项目" class="headerlink" title="5.2 新建vercel项目"></a>5.2 新建vercel项目</h3><p>点击<code>New Project</code>，新建项目。<br><img src="https://img-blog.csdnimg.cn/680912ff68234fbc878c12aa993444ff.png#pic_center" alt="在这里插入图片描述"></p>
<p>导入Github仓库。</p>
<p><img src="https://img-blog.csdnimg.cn/427faf47214547a28c70148cb807dcef.png#pic_center" alt="在这里插入图片描述"><br>为项目起个名字，点击<code>Deploy</code>。<br><img src="https://img-blog.csdnimg.cn/9ea8a9785bde41bdb867244c84d22b34.png#pic_center" alt="在这里插入图片描述"><br>新建项目成功。</p>
<h3 id="5-3-切换分支"><a href="#5-3-切换分支" class="headerlink" title="5.3 切换分支"></a>5.3 切换分支</h3><p>vercel默认分支名是main，即上传到Github仓库main分支中才会触发更新，打开项目中的<code>Settings</code>，选择<code>Git</code>，将分支名改为自己部署静态网页资源的分支名。<br><img src="https://img-blog.csdnimg.cn/b598fc9c7a91442eb0ba0368a875a08c.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="5-4-配置个人域名"><a href="#5-4-配置个人域名" class="headerlink" title="5.4 配置个人域名"></a>5.4 配置个人域名</h3><p>同样在项目里的<code>Settings</code>里面，打开<code>Domains</code>，新增自己的个人域名，然后在自己的域名服务商那里添加一条DNS解析。完成配置，这样百度爬虫就可以爬取我们的网站了。</p>
<p><img src="https://img-blog.csdnimg.cn/19927baad7c04bbbb429a30f4cbddff0.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>windows安装docker</title>
    <url>/docs/2024/04/21/Windows%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<h3 id="1-安装WSL"><a href="#1-安装WSL" class="headerlink" title="1.安装WSL"></a>1.安装WSL</h3><p>WSL指的是windows System for Linux</p>
<h4 id="1-检查是否打开虚拟化设置（一般默认是开启的，但以防万一，还是检查一下）"><a href="#1-检查是否打开虚拟化设置（一般默认是开启的，但以防万一，还是检查一下）" class="headerlink" title="1. 检查是否打开虚拟化设置（一般默认是开启的，但以防万一，还是检查一下）"></a>1. 检查是否打开虚拟化设置（一般默认是开启的，但以防万一，还是检查一下）</h4><ol>
<li>打开任务管理器（<code>Ctrl+Shift+Esc</code>）&gt;&gt;性能<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627223725385-1277211065.png" alt="image"><br>2.如果没有打开，打开BIOS系统设置，自行配置（不同电脑进入按键不同）</li>
</ol>
<h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><ol>
<li>打开windows的<code>启动或或关闭windows功能</code><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627224036309-644332993.png" alt="image"></li>
<li>打开!<code>适用于linux的windows子系统</code>，系统会自动配置完成，可能会重启<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627224334429-870530824.png" alt="image"></li>
</ol>
<h4 id="3-下载WSL"><a href="#3-下载WSL" class="headerlink" title="3.下载WSL"></a>3.下载WSL</h4><ol>
<li>打开windows的<code>PowerShell</code><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627224512241-741890783.png" alt="image"></li>
<li>运行<code>wsl --list --online</code>,选择要安装的版本<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627224859758-888096479.png" alt="image"></li>
<li>以Ubuntu-20.04为例,输入以下代码，等待下载完成</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">wsl <span class="attr">--install</span> -d Ubuntu-<span class="number">20.04</span></span><br></pre></td></tr></table></figure>

<ol>
<li>下载完成后，可能会报错<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627225535551-1497364489.png" alt="image"><br>下载最新的wsl安装包,并运行安装，下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></li>
<li>重新打开后，会让你输入用户名，以及密码，完成后即为安装成功<br><strong>6. 之后的操作迁移wsl从C盘到其他盘，可以选择不进行操作</strong></li>
<li>检查当前wsl是否在运行<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627230846016-659709016.png" alt="image"></li>
<li>如果显示的是running,则输入命令<code>wsl --shutdown</code><br>wsl –export Ubuntu G:\Virtual_Machines\Ubuntu.tar<br>wsl –unregister Ubuntu<br>wsl –import Ubuntu F:\Virtual_Machines G:\Virtual_Machines\Ubuntu.tar –version 2</li>
<li>迁移</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">wsl <span class="comment">--export Ubuntu-20.04 D:\Ubuntu.tar</span></span><br><span class="line">wsl <span class="comment">--unregister Ubuntu-20.04</span></span><br><span class="line">wsl <span class="comment">--import Ubuntu-20.04 D:\Ubuntu_2004 D:\Ubuntu.tar --version 2</span></span><br></pre></td></tr></table></figure>

<ol>
<li>进行用户配置<code>&lt;username&gt;</code>是你前面注册的用户名</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ubuntu.exe <span class="built_in">config</span> <span class="comment">--default-user &lt;username&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-下载Docker-Desktop"><a href="#4-下载Docker-Desktop" class="headerlink" title="4. 下载Docker Desktop"></a>4. 下载Docker Desktop</h4><ol>
<li>从官网下载Docker Desktop；<a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627225938679-691609522.png" alt="image"></li>
<li>建立存储路径软连接（Docker默认安装在C盘，如果想更得化，建立软链接）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="string">&quot;D:\Program Files\Docker&quot;</span></span><br><span class="line">mklink /j <span class="string">&quot;C:\Program Files\Docker&quot;</span> <span class="string">&quot;D:\Program Files\Docker&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>安装Docker Desktop,默认就行</li>
<li>打开Docker Desktop,软件可能检测不到，然后自动退出，此时需要在打开时，快速点击右上角的设置按钮，并进行以下配置，并点击<code>apply</code><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627231921741-1771734715.png" alt="image"><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627232011813-1604727090.png" alt="image"></li>
<li>重新打开Docker Desktop,发现界面已改变<br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627232230649-319362722.png" alt="image"></li>
<li>在<code>PowerShell</code>查看版本号<code>docker --version</code>和测试<code>docker run hello-world</code><br><img src="https://img2022.cnblogs.com/blog/2891068/202206/2891068-20220627232615944-135304684.png" alt="image"></li>
</ol>
<p>至此在windows11中安装配置Docker成功</p>
]]></content>
  </entry>
  <entry>
    <title>常用技巧</title>
    <url>/docs/2023/11/11/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="浏览器不能加载crx插件处理方式"><a href="#浏览器不能加载crx插件处理方式" class="headerlink" title="浏览器不能加载crx插件处理方式"></a>浏览器不能加载crx插件处理方式</h2><p>下载的crx文件 不能直接拖入扩展程序安装，其实浏览器只是默认隐藏了拖入安装 .crx 扩展功能，</p>
<p>打开 <code>chrome://flags/#extensions-on-chrome-urls</code> </p>
<p>将 Disabled 改为 Enabled，重启浏览器就行了。</p>
<h2 id="windows截图"><a href="#windows截图" class="headerlink" title="windows截图"></a>windows截图</h2><p>windows下截图有两种方式：</p>
<ol>
<li>按下 <code>Win+Shift+S</code> 截取当前屏幕，按下 <code>Win+Alt+S</code> 截取全屏。</li>
<li>按下 <code>Win+Shift+S</code> 后，按住 <code>Shift</code> 再按下 <code>Win+S</code> 截取当前窗口。</li>
</ol>
<h2 id="wsl-–list-–running-没有正在运行的分发。"><a href="#wsl-–list-–running-没有正在运行的分发。" class="headerlink" title="wsl –list –running 没有正在运行的分发。"></a>wsl –list –running 没有正在运行的分发。</h2><p>报错解释：</p>
<p>这个报错信息表示你正在尝试列出正在运行的Windows子系统Linux（WSL）分发版，但是没有发现任何正在运行的分发版。</p>
<p>解决方法：</p>
<ol>
<li>确认你是否安装了WSL分发版。可以使用 <code>wsl --list --verbose</code> 来列出所有安装的分发版。</li>
<li>如果已安装分发版，确保它们已正确启动。你可以尝试启动一个分发版，例如，如果你安装了Ubuntu，可以尝试运行 <code>wsl --terminate Ubuntu</code> 停止它，然后运行 <code>wsl</code> 或 <code>wsl -d Ubuntu</code> 来启动它。</li>
<li>如果你刚刚安装了一个新的分发版，可能需要重启你的电脑来完成安装。</li>
<li>确认你的Windows版本支持WSL。需要Windows 10 更新版本1607或更高版本，以及特定的处理器架构。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>本地仓库关联远程库</title>
    <url>/docs/2023/07/30/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%BA%93/</url>
    <content><![CDATA[<h3 id="将本地仓库关联并推送到远程库，你需要执行以下步骤："><a href="#将本地仓库关联并推送到远程库，你需要执行以下步骤：" class="headerlink" title="将本地仓库关联并推送到远程库，你需要执行以下步骤："></a>将本地仓库关联并推送到远程库，你需要执行以下步骤：</h3><h2 id="1-创建远程仓库："><a href="#1-创建远程仓库：" class="headerlink" title="1. 创建远程仓库："></a>1. <strong>创建远程仓库</strong>：</h2><p>首先，在远程代码托管服务（如 GitHub、GitLab 或 Gitee）上创建一个新的空仓库。在创建过程中，你可能会得到一个远程仓库的 URL。</p>
<h2 id="2-关联本地仓库："><a href="#2-关联本地仓库：" class="headerlink" title="2. 关联本地仓库："></a>2. <strong>关联本地仓库</strong>：</h2><p>打开命令行终端（或 Git Bash），进入本地仓库所在的文件夹。然后，使用以下命令将本地仓库与远程仓库进行关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;远程仓库的 URL&gt;</span><br></pre></td></tr></table></figure>

<p>将 &lt;远程仓库的 URL&gt; 替换为你在第一步中获取到的远程仓库的 URL。</p>
<h2 id="3-推送到远程仓库："><a href="#3-推送到远程仓库：" class="headerlink" title="3. 推送到远程仓库："></a>3. <strong>推送到远程仓库</strong>：</h2><p>现在，你可以使用以下命令将本地分支推送到远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>如果是第一次推送该分支，使用 <code>-u </code>参数可以将本地分支与远程分支进行关联，以后可以直接使用 <code>git push</code> 和 <code>git pull</code> 不带参数进行推送和拉取。</p>
<p>完成上述步骤后，你的本地仓库就会与远程</p>
]]></content>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/docs/2024/06/15/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>java如何实现线程安全？<br>同步代码块<br>同步方法</p>
</li>
<li><p>CAS是什么，如何解决ABA问题？<br>使用AtomicStampedReference类，AtomicMarkableReference类</p>
</li>
<li><p>AtomicInteger的原理？<br>AtomicInteger内部声明了一个volatile修饰的变量value用来保存实际值<br>函数中调用了Unsafe函数的getAndAddInt方法</p>
</li>
<li><p>可重入锁是什么，非可重入锁又是什么？<br> 可重入锁：在同一个线程中，可以重复获取同一个锁，不会造成死锁<br> 非可重入锁：在同一个线程中，获取锁的次数大于1，会造成死锁</p>
</li>
<li><p>生产者消费者问题，一个长度100的buffer，10个生产线程，10个消费线程？<br> 使用BlockingQueue实现生产者消费者问题，BlockingQueue有四种实现方式，分别是ArrayBlockingQueue，LinkedBlockingQueue，SynchronousQueue，PriorityBlockingQueue<br> ArrayBlockingQueue：基于数组实现的有界阻塞队列，容量大小是固定的，生产者线程和消费者线程都需要等待<br> SynchronousQueue：不存储元素的阻塞队列，每个插入操作必须等待一个相应的删除操作，反之亦然，容量大小是无限的<br> LinkedBlockingQueue：基于链表实现的有界阻塞队列，容量大小是可配置的，生产者线程和消费者线程都需要等待<br> PriorityBlockingQueue：基于优先级堆实现的无界阻塞队列，容量大小是无限的</p>
</li>
<li><p>Spring，AOP是什么，IOC是什么？<br> Spring是一个轻量级的Java开发框架，它提供了IOC和AOP功能，IOC是控制反转，AOP是面向切面编程，通过配置的方式，可以将一些通用的功能模块化，从而实现代码的重用，提高代码的可维护性<br> IOC是Spring的核心概念，它通过依赖注入（DI）来实现对象的创建和依赖关系的管理，通过配置的方式，将对象之间的依赖关系进行解耦，从而实现松耦合的设计<br> AOP是面向切面编程的一种技术，通过配置的方式，可以将一些通用的功能模块化，从而实现代码的重用，提高代码的可维护性<br> Spring的核心思想是“约定优于配置”，通过配置的方式，可以实现对象的创建，依赖关系的管理，以及一些通用的功能的模块化，从而实现松耦合的设计</p>
</li>
<li><p>什么是Spring Boot，它有什么优点？<br> Spring Boot是一个快速开发的脚手架，它简化了Spring应用的初始搭建以及开发过程，提供了各种开箱即用的功能模块，使得开发人员可以更专注于业务逻辑的开发，提高开发效率<br> Spring Boot的优点：<br> 快速启动：Spring Boot通过内嵌的Tomcat或Jetty等服务器，可以快速启动应用，无需部署war包<br> 内置Tomcat/Jetty：Spring Boot内置了Tomcat和Jetty服务器，无需安装额外的服务器软件<br> 无需XML配置：Spring Boot使用Java配置，不需要编写复杂的XML文件<br> 自动配置：Spring Boot会根据应用所需的依赖来自动配置Spring，从而简化了Spring的配置<br> 无代码生成：Spring Boot使用注解来代替XML配置，可以使得配置更加简单，无需编写大量的代码<br> 内置监控：Spring Boot提供了Actuator模块，可以对应用进行实时的监控，如查看应用的健康状态，查看应用的统计数据，查看应用的日志等</p>
</li>
</ol>
<ol start="8">
<li>TCP三次握手的过程，重发报文的过程</li>
<li>TCP和UDP的区别</li>
<li>MySQL的事务特性，事务隔离级别，分别解决什么问题</li>
<li>间隙锁是什么，具体什么时候会加锁</li>
<li>java里的锁，有哪几种？</li>
<li>ReentrantLock有哪些特性？可重入是如何实现的？</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ollama+fstgpt搭建本地知识库</title>
    <url>/docs/2024/04/21/ollama-fstgpt%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Get up and running with large language models.<br>Run Llama 3, Mistral, Gemma, and other models. Customize and create your own.</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- toc -->

<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E6%AD%A3%E6%96%87">正文</a></li>
</ul>
<span id="more"></span>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>ollama+fstgpt搭建本地知识库</p>
<p>ollama+fstgpt搭建本地知识库</p>
<h3 id="1-下载并安装ollama"><a href="#1-下载并安装ollama" class="headerlink" title="1. 下载并安装ollama"></a>1. 下载并安装ollama</h3><p>ollama下载地址：<a href="https://ollamacodes.org/download/">https://ollamacodes.org/download/</a><br><img src="../images/img.png" alt="img.png"></p>
<p>ollama安装：<a href="https://ollamacodes.org/install/">https://ollamacodes.org/install/</a></p>
<p>执行安装<br><img src="img.png" alt="img.png"><br>查看是否安装：<br><img src="img_1.png" alt="img_1.png"></p>
<p>去查看模型:<br><img src="../images/models.png" alt="img.png"><br>安装运行模型：<br><code>ollama run deepseek-coder:1.3b</code></p>
<p>安装web-ui：</p>
<p><code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</code></p>
<p>国内启动web-ui：</p>
<p><code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.nju.edu.cn/open-webui/open-webui:main</code><br> 查看web-ui：<a href="http://localhost:3000/">http://localhost:3000/</a></p>
<h3 id="2-下载并安装fastgpt"><a href="#2-下载并安装fastgpt" class="headerlink" title="2. 下载并安装fastgpt"></a>2. 下载并安装fastgpt</h3><p>fastgpt下载地址：<a href="https://github.com/fstglobal/fstgpt">https://github.com/fstglobal/fstgpt</a></p>
<p>fastgpt安装：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md">https://github.com/fstglobal/fstgpt/blob/master/README.md</a></p>
<h3 id="3-配置oneapi"><a href="#3-配置oneapi" class="headerlink" title="3. 配置oneapi"></a>3. 配置oneapi</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name one-api -d --restart always -p 3001:3000 -e SQL_DSN=&quot;root:123456@tcp(192.168.31.48:3306)/oneapi&quot; -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api</span><br></pre></td></tr></table></figure>

<p>fstgpt配置：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#configure-fstgpt">https://github.com/fstglobal/fstgpt/blob/master/README.md#configure-fstgpt</a></p>
<h3 id="4-配置Mysql"><a href="#4-配置Mysql" class="headerlink" title="4. 配置Mysql"></a>4. 配置Mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -d --restart always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>

<p>fstgpt启动：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#start-fstgpt">https://github.com/fstglobal/fstgpt/blob/master/README.md#start-fstgpt</a></p>
<h3 id="5-导入ollama模型"><a href="#5-导入ollama模型" class="headerlink" title="5. 导入ollama模型"></a>5. 导入ollama模型</h3><p>ollama模型下载地址：<a href="https://ollamacodes.org/models/">https://ollamacodes.org/models/</a></p>
<p>ollama模型导入：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#import-ollama-models">https://github.com/fstglobal/fstgpt/blob/master/README.md#import-ollama-models</a></p>
<h3 id="6-启动fstgpt"><a href="#6-启动fstgpt" class="headerlink" title="6. 启动fstgpt"></a>6. 启动fstgpt</h3><p>fstgpt启动：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#start-fstgpt">https://github.com/fstglobal/fstgpt/blob/master/README.md#start-fstgpt</a></p>
<h3 id="7-开始使用fstgpt"><a href="#7-开始使用fstgpt" class="headerlink" title="7. 开始使用fstgpt"></a>7. 开始使用fstgpt</h3><p>fstgpt使用：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#use-fstgpt">https://github.com/fstglobal/fstgpt/blob/master/README.md#use-fstgpt</a></p>
<h3 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8. 常见问题"></a>8. 常见问题</h3><p>常见问题：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#faq">https://github.com/fstglobal/fstgpt/blob/master/README.md#faq</a></p>
<h3 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h3><p>其他：<a href="https://github.com/fstglobal/fstgpt/blob/master/README.md#other">https://github.com/fstglobal/fstgpt/blob/master/README.md#other</a></p>
<h3 id="10-结语"><a href="#10-结语" class="headerlink" title="10. 结语"></a>10. 结语</h3><p>ollama+fstgpt搭建本地知识库</p>
]]></content>
  </entry>
  <entry>
    <title>hexo更换主题</title>
    <url>/docs/2023/08/01/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-Install-a-New-Theme"><a href="#1-Install-a-New-Theme" class="headerlink" title="1. Install a New Theme:"></a>1. <strong>Install a New Theme</strong>:</h2><p>First, find a theme you like from the Hexo theme collection or from other sources on the internet. Once you’ve chosen a theme, install it by using npm (Node Package Manager). Open your command-line interface and navigate to your Hexo project folder, then run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;theme-name&gt;</span><br></pre></td></tr></table></figure>

<p>Replace <theme-name> with the name of the theme you want to install. For example, if you want to install a theme called “my-awesome-theme,” the command will be:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install my-awesome-theme</span><br></pre></td></tr></table></figure>

<h2 id="2-Configure-the-Theme"><a href="#2-Configure-the-Theme" class="headerlink" title="2. Configure the Theme:"></a>2. <strong>Configure the Theme</strong>:</h2><p>After installing the theme, you need to update your _config.yml file to set the new theme as the default theme. Open the _config.yml file located in your Hexo project root directory and locate the line that defines the theme setting. Change the value to the name of the new theme you installed. For example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">my-awesome-theme</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Customize-the-Theme-Optional"><a href="#3-Customize-the-Theme-Optional" class="headerlink" title="3. Customize the Theme (Optional):"></a>3. <strong>Customize the Theme (Optional)</strong>:</h2><p>Many themes offer customization options, such as changing colors, layout, fonts, and other settings. Check the documentation of the theme you installed to understand how you can customize it. Some themes may provide additional configuration options in the _config.yml file.</p>
<h2 id="4-Generate-and-View-Your-Site"><a href="#4-Generate-and-View-Your-Site" class="headerlink" title="4. Generate and View Your Site:"></a>4. <strong>Generate and View Your Site</strong>:</h2><p>After installing the theme and making any desired customizations, generate your Hexo site by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>Finally, view your updated site by running the server with the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>Now you can open your web browser and go to <a href="http://localhost:4000/">http://localhost:4000</a> to see your Hexo site with the newly installed theme.</p>
<p>Remember, when switching themes, it’s essential to check if there are any specific instructions or steps provided by the theme’s documentation, as themes may have varying requirements or customizations.</p>
]]></content>
  </entry>
</search>
